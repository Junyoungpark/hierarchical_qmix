diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
index 8450223..f53dd33 100644
--- a/src/agent/QmixAgent.py
+++ b/src/agent/QmixAgent.py
@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
 from src.config.ConfigBase import ConfigBase
 from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
 
+
 class QmixAgentConfig(ConfigBase):
     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
                  buffer_conf=None):
diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
index 17cd6d6..affbcda 100644
--- a/src/brain/QmixBrain.py
+++ b/src/brain/QmixBrain.py
@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
 
         self.fit = {
             'tau': 0.1,
-            'auto_norm_clip': False,
-            'auto_norm_clip_base_val': 0.1
+            'auto_norm_clip': True,
+            'auto_norm_clip_base_val': 0.1,
+            'norm_clip_val': 1.0
         }
 
 
@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
             qs, _ = qs.max(dim=1)
         else:
             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
+        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
         return q_tot
 
     @staticmethod
@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
         target_q_dict = target_qnet.compute_qs(**inputs)
         target_q = target_q_dict['qs']
         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
+        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
         return target_q_tot
 
     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
index 7bac0ed..0d19849 100644
--- a/src/memory/MemoryBase.py
+++ b/src/memory/MemoryBase.py
@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
             'N': 2
         }
 
+    def __call__(self, base_prefix):
+        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
+
 
 class NstepMemory:
     def __init__(self, conf):
diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
index 0516700..6d815a3 100644
--- a/src/rl/QmixNetwork.py
+++ b/src/rl/QmixNetwork.py
@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
                                                 supmixer_mlp=supmixer_mlp_conf)
         self.submixer = QmixerConfig()
-        self.supmixer_gc = {'in_features': 19,
+        self.supmixer_gc = {'in_features': 51,
                             'out_features': 1,
                             'bias': True}
         self.supmixer_mlp = MLPConfig().mlp
+        self.supmixer_mlp['input_dimension'] = 51
+        self.supmixer_mlp['output_dimension'] = 1
 
 
 class QmixNetwork(torch.nn.Module):
@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
         #### slow implementation ####
 
         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
+        sup_ws = torch.nn.functional.softmax(sup_ws, dim=1)
 
         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
         sup_qs = sup_weighted_qs.sum(dim=1)
 
-        if isinstance(graph, dgl.BatchedDGLGraph):
-            num_graphs = graph.batch_size
-        else:
-            num_graphs = 1
-
-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
+        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
         sup_qs = sup_qs + sup_q_bs
 
-        return sup_qs
+        return sup_qs.view(-1)
 
 
 if __name__ == "__main__":
diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
index 93429d0..e09727a 100644
--- a/src/rl/Qmixer.py
+++ b/src/rl/Qmixer.py
@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
 from src.config.ConfigBase import ConfigBase
 
 from src.util.graph_util import get_filtered_node_index_by_type
-from src.util.train_util import dn
+
 
 class QmixerConfig(ConfigBase):
 
@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
 
         self.mixer = {'num_clusters': 3}
         self.b_net = MLPConfig().mlp
-        self.b_net['input_dimension'] = 19
+        self.b_net['input_dimension'] = 51
         self.b_net['output_dimension'] = self.mixer['num_clusters']
 
         self.w_net = RGNConfig().gnn
+        self.w_net['input_node_dim'] = 51
         self.w_net['output_node_dim'] = self.mixer['num_clusters']
 
 
@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
+        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
         return ally_ws
 
     def get_feat(self, graph, node_feature):
diff --git a/src/test/test.py b/src/test/test.py
index 45927dc..f3d2c1d 100644
--- a/src/test/test.py
+++ b/src/test/test.py
@@ -1,14 +1,22 @@
+import wandb
+import numpy as np
+
 from src.runners.RunnerManager import RunnerConfig, RunnerManager
 from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
 
 if __name__ == '__main__':
 
+    exp_name = "qmix_refac"
     conf = QmixAgentConfig()
     agent = QmixAgent(conf)
 
     runner_conf = RunnerConfig(agent=agent)
     runner = RunnerManager(runner_conf)
 
+    wandb.init(project="qmix3", name=exp_name)
+    wandb.watch(agent)
+    wandb.config.update(conf())
+
     iters = 0
     while iters < 100:
         iters += 1
@@ -16,5 +24,15 @@ if __name__ == '__main__':
         runner.transfer_sample()
 
         agent.to('cuda')
-        agent.fit(device='cuda')
+        fit_return_dict = agent.fit(device='cuda')
         agent.to('cpu')
+
+        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
+        running_wr = np.mean(running_wrs)
+
+        print(iters)
+        print(fit_return_dict)
+
+        wandb.log(fit_return_dict, step=iters)
+        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
+
diff --git a/src/test/wandb/debug.log b/src/test/wandb/debug.log
new file mode 100644
index 0000000..1c4f836
--- /dev/null
+++ b/src/test/wandb/debug.log
@@ -0,0 +1,20 @@
+2019-12-07 23:20:46,170 DEBUG   MainThread:20772 [wandb_config.py:_load_defaults():87] no defaults not found in config-defaults.yaml
+2019-12-07 23:20:46,229 DEBUG   MainThread:20772 [util.py:is_cygwin_git():318] Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'The system cannot find the file specified', None, 2, None)
+2019-12-07 23:20:46,235 DEBUG   MainThread:20772 [cmd.py:execute():724] Popen(['git', 'cat-file', '--batch-check'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=<valid stream>)
+2019-12-07 23:20:46,309 DEBUG   MainThread:20772 [cmd.py:execute():724] Popen(['git', 'rev-parse', '--show-toplevel'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:46,379 DEBUG   MainThread:20772 [cmd.py:execute():724] Popen(['git', 'status', '--porcelain', '--untracked-files'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:46,474 DEBUG   MainThread:20772 [run_manager.py:__init__():535] Initialized sync for qmix3/01ruhkqz
+2019-12-07 23:20:46,484 INFO    MainThread:20772 [run_manager.py:wrap_existing_process():1115] wrapping existing process 3184
+2019-12-07 23:20:46,489 DEBUG   MainThread:20772 [connectionpool.py:_new_conn():959] Starting new HTTPS connection (1): pypi.org:443
+2019-12-07 23:20:47,100 DEBUG   MainThread:20772 [connectionpool.py:_make_request():437] https://pypi.org:443 "GET /pypi/wandb/json HTTP/1.1" 200 38505
+2019-12-07 23:20:47,185 INFO    Thread-18 :20772 [run_manager.py:_on_file_created():671] file/dir created: C:\Users\joon0\dev\hierarchical_qmix\src\test\wandb\run-20191207_142042-01ruhkqz\output.log
+2019-12-07 23:20:47,384 INFO    MainThread:20772 [run_manager.py:init_run():912] system metrics and metadata threads started
+2019-12-07 23:20:47,385 INFO    MainThread:20772 [run_manager.py:init_run():946] upserting run before process can begin, waiting at most 10 seconds
+2019-12-07 23:20:47,425 DEBUG   Thread-43 :20772 [connectionpool.py:_new_conn():959] Starting new HTTPS connection (1): api.wandb.ai:443
+2019-12-07 23:20:47,843 DEBUG   Thread-43 :20772 [connectionpool.py:_make_request():437] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 492
+2019-12-07 23:20:47,855 INFO    Thread-43 :20772 [run_manager.py:_upsert_run():1019] saving patches
+2019-12-07 23:20:47,856 DEBUG   Thread-43 :20772 [cmd.py:execute():724] Popen(['git', 'rev-parse', '--show-toplevel'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:47,939 DEBUG   Thread-43 :20772 [cmd.py:execute():724] Popen(['git', 'diff', '--cached', '--abbrev=40', '--full-index', '--raw'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:48,043 DEBUG   Thread-43 :20772 [cmd.py:execute():724] Popen(['git', 'diff', '--abbrev=40', '--full-index', '--raw'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:48,193 DEBUG   Thread-43 :20772 [cmd.py:execute():724] Popen(['git', 'version'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
+2019-12-07 23:20:48,343 DEBUG   Thread-43 :20772 [cmd.py:execute():724] Popen(['git', 'merge-base', 'HEAD', '2d6d12cad527f1961f825a7da7a2b7d481c46f01'], cwd=C:\Users\joon0\dev\hierarchical_qmix, universal_newlines=False, shell=None, istream=None)
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/config.yaml b/src/test/wandb/run-20191207_134233-zog67a0b/config.yaml
new file mode 100644
index 0000000..e5b3851
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/config.yaml
@@ -0,0 +1,8 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/diff.patch b/src/test/wandb/run-20191207_134233-zog67a0b/diff.patch
new file mode 100644
index 0000000..1fb8383
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/diff.patch
@@ -0,0 +1,151 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..8ce88ea 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,20 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
++        # if isinstance(graph, dgl.BatchedDGLGraph):
++        #     num_graphs = graph.batch_size
++        # else:
++        #     num_graphs = 1
+ 
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..715cd91 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,21 @@
++import wandb
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/output.log b/src/test/wandb/run-20191207_134233-zog67a0b/output.log
new file mode 100644
index 0000000..80d4e53
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/output.log
@@ -0,0 +1,14 @@
+Traceback (most recent call last):
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 2073, in <module>
+    main()
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 2067, in main
+    globals = debugger.run(setup['file'], None, None, is_module)
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 1418, in run
+    return self._exec(is_module, entry_point_fn, module_name, file, globals, locals)
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 1425, in _exec
+    pydev_imports.execfile(file, globals, locals)  # execute the script
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\_pydev_imps\_pydev_execfile.py", line 18, in execfile
+    exec(compile(contents+"\n", file, 'exec'), glob, loc)
+  File "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py", line 17, in <module>
+    wandb.update(conf())
+AttributeError: module 'wandb' has no attribute 'update'
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/requirements.txt b/src/test/wandb/run-20191207_134233-zog67a0b/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/wandb-events.jsonl b/src/test/wandb/run-20191207_134233-zog67a0b/wandb-events.jsonl
new file mode 100644
index 0000000..91978f8
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/wandb-events.jsonl
@@ -0,0 +1 @@
+{"system.gpu.0.gpu": 29.0, "system.gpu.0.memory": 18.0, "system.gpu.0.memory_allocated": 31.06, "system.gpu.0.temp": 36.0, "system.cpu": 46.45, "system.memory": 65.5, "system.disk": 88.3, "system.proc.memory.availableMB": 5616.43, "system.proc.memory.rssMB": 177.3, "system.proc.memory.percent": 1.09, "system.proc.cpu.threads": 11.0, "system.network.sent": 9009, "system.network.recv": 58510, "_wandb": true, "_timestamp": 1575726160, "_runtime": 3}
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/wandb-history.jsonl b/src/test/wandb/run-20191207_134233-zog67a0b/wandb-history.jsonl
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_134233-zog67a0b/wandb-metadata.json b/src/test/wandb/run-20191207_134233-zog67a0b/wandb-metadata.json
new file mode 100644
index 0000000..7257d83
--- /dev/null
+++ b/src/test/wandb/run-20191207_134233-zog67a0b/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T13:42:37.037935",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T13:42:38.473347"
+}
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/config.yaml b/src/test/wandb/run-20191207_134426-2anor2po/config.yaml
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/diff.patch b/src/test/wandb/run-20191207_134426-2anor2po/diff.patch
new file mode 100644
index 0000000..d4e35c5
--- /dev/null
+++ b/src/test/wandb/run-20191207_134426-2anor2po/diff.patch
@@ -0,0 +1,165 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..8ce88ea 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,20 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
++        # if isinstance(graph, dgl.BatchedDGLGraph):
++        #     num_graphs = graph.batch_size
++        # else:
++        #     num_graphs = 1
+ 
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/output.log b/src/test/wandb/run-20191207_134426-2anor2po/output.log
new file mode 100644
index 0000000..5f2c229
--- /dev/null
+++ b/src/test/wandb/run-20191207_134426-2anor2po/output.log
@@ -0,0 +1,44 @@
+Traceback (most recent call last):
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 2073, in <module>
+    main()
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 2067, in main
+    globals = debugger.run(setup['file'], None, None, is_module)
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 1418, in run
+    return self._exec(is_module, entry_point_fn, module_name, file, globals, locals)
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\pydevd.py", line 1425, in _exec
+    pydev_imports.execfile(file, globals, locals)  # execute the script
+  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pydev\_pydev_imps\_pydev_execfile.py", line 18, in execfile
+    exec(compile(contents+"\n", file, 'exec'), glob, loc)
+  File "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py", line 18, in <module>
+    wandb.config.update(conf())
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\wandb\wandb_config.py", line 257, in update
+    self._update(params, allow_val_change=allow_val_change)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\wandb\wandb_config.py", line 254, in _update
+    self.persist()
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\wandb\wandb_config.py", line 171, in persist
+    conf_file.write(str(self))
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\wandb\wandb_config.py", line 289, in __str__
+    allow_unicode=True, encoding='utf-8')
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\__init__.py", line 290, in dump
+    return dump_all([data], stream, Dumper=Dumper, **kwds)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\__init__.py", line 278, in dump_all
+    dumper.represent(data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 27, in represent
+    node = self.represent_data(data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 48, in represent_data
+    node = self.yaml_representers[data_types[0]](self, data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 207, in represent_dict
+    return self.represent_mapping('tag:yaml.org,2002:map', data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 118, in represent_mapping
+    node_value = self.represent_data(item_value)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 48, in represent_data
+    node = self.yaml_representers[data_types[0]](self, data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 207, in represent_dict
+    return self.represent_mapping('tag:yaml.org,2002:map', data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 118, in represent_mapping
+    node_value = self.represent_data(item_value)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 58, in represent_data
+    node = self.yaml_representers[None](self, data)
+  File "C:\Users\joon0\Anaconda3\envs\gpu_torch130\lib\site-packages\yaml\representer.py", line 231, in represent_undefined
+    raise RepresenterError("cannot represent an object", data)
+yaml.representer.RepresenterError: ('cannot represent an object', <class 'src.memory.MemoryBase.exp_args'>)
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/requirements.txt b/src/test/wandb/run-20191207_134426-2anor2po/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_134426-2anor2po/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/wandb-events.jsonl b/src/test/wandb/run-20191207_134426-2anor2po/wandb-events.jsonl
new file mode 100644
index 0000000..1f2c8ea
--- /dev/null
+++ b/src/test/wandb/run-20191207_134426-2anor2po/wandb-events.jsonl
@@ -0,0 +1 @@
+{"system.gpu.0.gpu": 28.0, "system.gpu.0.memory": 17.5, "system.gpu.0.memory_allocated": 31.09, "system.gpu.0.temp": 36.0, "system.cpu": 35.1, "system.memory": 65.9, "system.disk": 88.3, "system.proc.memory.availableMB": 5550.72, "system.proc.memory.rssMB": 177.25, "system.proc.memory.percent": 1.09, "system.proc.cpu.threads": 11.0, "system.network.sent": 9486, "system.network.recv": 59585, "_wandb": true, "_timestamp": 1575726272, "_runtime": 3}
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/wandb-history.jsonl b/src/test/wandb/run-20191207_134426-2anor2po/wandb-history.jsonl
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_134426-2anor2po/wandb-metadata.json b/src/test/wandb/run-20191207_134426-2anor2po/wandb-metadata.json
new file mode 100644
index 0000000..450ef4d
--- /dev/null
+++ b/src/test/wandb/run-20191207_134426-2anor2po/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T13:44:29.078859",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T13:44:30.525466"
+}
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/config.yaml b/src/test/wandb/run-20191207_134937-4hy3pf5i/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/diff.patch b/src/test/wandb/run-20191207_134937-4hy3pf5i/diff.patch
new file mode 100644
index 0000000..0fbbb64
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/diff.patch
@@ -0,0 +1,179 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..8ce88ea 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,20 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
++        # if isinstance(graph, dgl.BatchedDGLGraph):
++        #     num_graphs = graph.batch_size
++        # else:
++        #     num_graphs = 1
+ 
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/output.log b/src/test/wandb/run-20191207_134937-4hy3pf5i/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/requirements.txt b/src/test/wandb/run-20191207_134937-4hy3pf5i/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-events.jsonl b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-events.jsonl
new file mode 100644
index 0000000..6aff023
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-events.jsonl
@@ -0,0 +1,2 @@
+{"system.gpu.0.gpu": 17.47, "system.gpu.0.memory": 6.07, "system.gpu.0.memory_allocated": 27.67, "system.gpu.0.temp": 34.6, "system.cpu": 53.0, "system.memory": 62.31, "system.disk": 88.3, "system.proc.memory.availableMB": 6134.54, "system.proc.memory.rssMB": 1377.15, "system.proc.memory.percent": 8.46, "system.proc.cpu.threads": 18.47, "system.network.sent": 102179, "system.network.recv": 149803, "_wandb": true, "_timestamp": 1575726610, "_runtime": 31}
+{"system.gpu.0.gpu": 12.67, "system.gpu.0.memory": 1.2, "system.gpu.0.memory_allocated": 37.94, "system.gpu.0.temp": 36.07, "system.cpu": 73.04, "system.memory": 70.49, "system.disk": 88.3, "system.proc.memory.availableMB": 4803.69, "system.proc.memory.rssMB": 2627.96, "system.proc.memory.percent": 16.15, "system.proc.cpu.threads": 21.73, "system.network.sent": 444714, "system.network.recv": 422379, "_wandb": true, "_timestamp": 1575726641, "_runtime": 62}
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-history.jsonl b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-history.jsonl
new file mode 100644
index 0000000..1643baa
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-history.jsonl
@@ -0,0 +1,4 @@
+{"loss": 3291.592529296875, "loss2": 233039.53125, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 59.72063136100769, "_timestamp": 1575726611.1007166, "_step": 1}
+{"loss": 971.0632934570312, "loss2": 587434.3125, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 69.41020083427429, "_timestamp": 1575726620.790286, "_step": 2}
+{"loss": 1136.208251953125, "loss2": 243209.0625, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 81.07121276855469, "_timestamp": 1575726632.451298, "_step": 3}
+{"loss": 1411.279541015625, "loss2": 113773.703125, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 94.48335266113281, "_timestamp": 1575726645.863438, "_step": 4}
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-metadata.json b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-metadata.json
new file mode 100644
index 0000000..9d1ead5
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T13:49:39.356707",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T13:50:45.707321"
+}
diff --git a/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-summary.json b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-summary.json
new file mode 100644
index 0000000..b457493
--- /dev/null
+++ b/src/test/wandb/run-20191207_134937-4hy3pf5i/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "train_winning_ratio": 0.0,
+    "epsilon": 0.8999999761581421,
+    "_runtime": 94.48335266113281,
+    "loss": 1411.279541015625,
+    "_step": 4,
+    "_timestamp": 1575726645.863438,
+    "loss2": 113773.703125
+}
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/config.yaml b/src/test/wandb/run-20191207_135147-2zj9hp3t/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/diff.patch b/src/test/wandb/run-20191207_135147-2zj9hp3t/diff.patch
new file mode 100644
index 0000000..0fbbb64
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/diff.patch
@@ -0,0 +1,179 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..8ce88ea 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,20 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
++        # if isinstance(graph, dgl.BatchedDGLGraph):
++        #     num_graphs = graph.batch_size
++        # else:
++        #     num_graphs = 1
+ 
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/output.log b/src/test/wandb/run-20191207_135147-2zj9hp3t/output.log
new file mode 100644
index 0000000..c1b09fe
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/output.log
@@ -0,0 +1,138 @@
+Python 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]
+Type 'copyright', 'credits' or 'license' for more information
+IPython 7.9.0 -- An enhanced Interactive Python. Type '?' for help.
+PyDev console: using IPython 7.9.0
+
+Out[1]: 
+tensor([[-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  3.7933e+01,  6.6443e-01, -1.3718e+01,
+          2.4776e+01,  1.2772e+01,  8.1981e-01, -9.0578e+00, -5.7544e+00,
+         -4.0402e+00,  6.8907e+00,  2.7428e+00,  2.0112e+01,  2.8942e+00,
+          1.5016e+01, -5.8296e+00, -1.2266e+01, -2.9462e+00, -4.3029e+01,
+         -3.1555e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  2.8476e+01,  4.5565e+00, -1.1236e+01,
+          1.9734e+01,  4.1334e+00,  6.8432e+00,  6.2916e+00, -1.1253e+01,
+          5.6454e+00,  6.9645e+00,  5.6167e-01,  8.1234e+00, -8.6363e-01,
+          1.1862e+01, -5.1611e+00, -1.0691e+01,  1.5564e+00, -3.8302e+01,
+         -3.5393e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  3.7906e+01,  7.5199e-01, -1.3730e+01,
+          2.4845e+01,  1.2634e+01,  8.5893e-01, -9.0254e+00, -5.7173e+00,
+         -4.0332e+00,  6.8860e+00,  2.7671e+00,  2.0096e+01,  2.9536e+00,
+          1.5067e+01, -5.7819e+00, -1.2155e+01, -2.9557e+00, -4.3136e+01,
+         -3.1612e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  3.7947e+01,  6.6360e-01, -1.3722e+01,
+          2.4775e+01,  1.2746e+01,  8.1957e-01, -9.0859e+00, -5.7363e+00,
+         -4.0813e+00,  6.9055e+00,  2.7521e+00,  2.0117e+01,  2.9008e+00,
+          1.5028e+01, -5.8235e+00, -1.2262e+01, -2.9542e+00, -4.3044e+01,
+         -3.1568e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  3.2924e+01,  1.0456e+00, -1.2278e+01,
+          2.4542e+01,  1.0293e+01,  3.3301e+00, -2.1791e+00, -7.1533e+00,
+         -4.9231e-01,  6.6547e+00,  2.6318e+00,  1.5345e+01,  2.7563e+00,
+          1.3559e+01, -5.2100e+00, -1.1741e+01, -1.8327e+00, -3.8995e+01,
+         -3.3026e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  3.2937e+01,  1.0484e+00, -1.2271e+01,
+          2.4564e+01,  1.0294e+01,  3.3435e+00, -2.1839e+00, -7.1456e+00,
+         -5.0068e-01,  6.6514e+00,  2.6467e+00,  1.5346e+01,  2.7617e+00,
+          1.3565e+01, -5.2038e+00, -1.1740e+01, -1.8422e+00, -3.8999e+01,
+         -3.3032e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02,  2.8429e+01,  4.5539e+00, -1.1172e+01,
+          1.9863e+01,  4.3425e+00,  6.8890e+00,  6.2735e+00, -1.1249e+01,
+          5.7640e+00,  6.9029e+00,  6.1997e-01,  8.2093e+00, -7.8926e-01,
+          1.1975e+01, -5.1945e+00, -1.0685e+01,  1.5050e+00, -3.8218e+01,
+         -3.5429e+01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02, -1.3814e+01, -2.4367e+01, -1.4792e+01,
+          1.5568e+01, -1.1715e+00, -2.7773e+01,  9.2359e+00,  5.4502e+00,
+         -1.5224e+01, -1.7931e+01,  2.3493e+01, -6.1231e-01, -1.1804e+00,
+         -5.9369e+00,  5.2363e-02,  2.4088e+01, -2.2800e+00, -2.7139e+01,
+          4.9649e-01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02, -1.3820e+01, -2.4353e+01, -1.4800e+01,
+          1.5561e+01, -1.1759e+00, -2.7768e+01,  9.2405e+00,  5.4592e+00,
+         -1.5212e+01, -1.7942e+01,  2.3486e+01, -6.1540e-01, -1.1715e+00,
+         -5.9318e+00,  4.3928e-02,  2.4080e+01, -2.2972e+00, -2.7128e+01,
+          4.9801e-01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02, -1.3827e+01, -2.4341e+01, -1.4808e+01,
+          1.5553e+01, -1.1810e+00, -2.7763e+01,  9.2448e+00,  5.4684e+00,
+         -1.5200e+01, -1.7951e+01,  2.3479e+01, -6.1774e-01, -1.1630e+00,
+         -5.9273e+00,  3.6686e-02,  2.4074e+01, -2.3132e+00, -2.7116e+01,
+          4.9847e-01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02, -1.3836e+01, -2.4320e+01, -1.4786e+01,
+          1.5512e+01, -1.2554e+00, -2.7722e+01,  9.3100e+00,  5.5332e+00,
+         -1.5159e+01, -1.7938e+01,  2.3507e+01, -5.5842e-01, -1.0920e+00,
+         -5.8716e+00,  1.2859e-01,  2.4042e+01, -2.3992e+00, -2.7017e+01,
+          5.0873e-01],
+        [-4.7572e-01,  1.0222e-01, -2.8245e-01,  3.1281e-01, -1.7729e-01,
+          2.7318e-01, -3.3324e-01, -4.4542e-01, -1.1135e-01, -1.7527e-01,
+          3.0367e-01, -2.1196e-01,  9.4663e-02,  3.1560e-01,  2.5169e-01,
+          8.0979e-02,  4.1387e-02,  1.2450e-02,  9.6250e-02, -9.3618e-02,
+          3.7914e-02, -2.6132e-01, -2.6493e-01, -3.5537e-02,  2.9869e-01,
+          3.4876e-01,  4.6050e-01, -1.8680e-01, -2.8394e-01,  3.0881e-01,
+          9.4189e-03,  8.0404e-02, -1.3832e+01, -2.4330e+01, -1.4797e+01,
+          1.5532e+01, -1.2185e+00, -2.7743e+01,  9.2781e+00,  5.5016e+00,
+         -1.5179e+01, -1.7945e+01,  2.3493e+01, -5.8827e-01, -1.1268e+00,
+         -5.8988e+00,  8.2720e-02,  2.4057e+01, -2.3572e+00, -2.7066e+01,
+          5.0431e-01]], grad_fn=<CatBackward>)
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/requirements.txt b/src/test/wandb/run-20191207_135147-2zj9hp3t/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-events.jsonl b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-events.jsonl
new file mode 100644
index 0000000..7f8404f
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-events.jsonl
@@ -0,0 +1,20 @@
+{"system.gpu.0.gpu": 21.8, "system.gpu.0.memory": 13.53, "system.gpu.0.memory_allocated": 21.21, "system.gpu.0.temp": 35.0, "system.cpu": 29.45, "system.memory": 53.81, "system.disk": 88.3, "system.proc.memory.availableMB": 7514.85, "system.proc.memory.rssMB": 188.47, "system.proc.memory.percent": 1.16, "system.proc.cpu.threads": 17.13, "system.network.sent": 93036, "system.network.recv": 211181, "_wandb": true, "_timestamp": 1575726741, "_runtime": 31}
+{"system.gpu.0.gpu": 16.6, "system.gpu.0.memory": 9.27, "system.gpu.0.memory_allocated": 21.07, "system.gpu.0.temp": 35.2, "system.cpu": 34.14, "system.memory": 53.85, "system.disk": 88.3, "system.proc.memory.availableMB": 7508.25, "system.proc.memory.rssMB": 191.91, "system.proc.memory.percent": 1.18, "system.proc.cpu.threads": 16.2, "system.network.sent": 116701, "system.network.recv": 235800, "_wandb": true, "_timestamp": 1575726772, "_runtime": 62}
+{"system.gpu.0.gpu": 19.93, "system.gpu.0.memory": 12.8, "system.gpu.0.memory_allocated": 20.99, "system.gpu.0.temp": 35.0, "system.cpu": 21.76, "system.memory": 53.79, "system.disk": 88.3, "system.proc.memory.availableMB": 7522.69, "system.proc.memory.rssMB": 192.21, "system.proc.memory.percent": 1.18, "system.proc.cpu.threads": 15.0, "system.network.sent": 132083, "system.network.recv": 254561, "_wandb": true, "_timestamp": 1575726803, "_runtime": 93}
+{"system.gpu.0.gpu": 18.6, "system.gpu.0.memory": 11.47, "system.gpu.0.memory_allocated": 21.04, "system.gpu.0.temp": 35.0, "system.cpu": 29.18, "system.memory": 53.76, "system.disk": 88.3, "system.proc.memory.availableMB": 7523.38, "system.proc.memory.rssMB": 197.6, "system.proc.memory.percent": 1.21, "system.proc.cpu.threads": 14.53, "system.network.sent": 158965, "system.network.recv": 284644, "_wandb": true, "_timestamp": 1575726834, "_runtime": 125}
+{"system.gpu.0.gpu": 17.27, "system.gpu.0.memory": 9.67, "system.gpu.0.memory_allocated": 23.49, "system.gpu.0.temp": 35.07, "system.cpu": 38.95, "system.memory": 56.67, "system.disk": 88.3, "system.proc.memory.availableMB": 7053.16, "system.proc.memory.rssMB": 701.79, "system.proc.memory.percent": 4.31, "system.proc.cpu.threads": 15.13, "system.network.sent": 183642, "system.network.recv": 301781, "_wandb": true, "_timestamp": 1575726865, "_runtime": 156}
+{"system.gpu.0.gpu": 4.2, "system.gpu.0.memory": 1.0, "system.gpu.0.memory_allocated": 32.99, "system.gpu.0.temp": 36.27, "system.cpu": 33.67, "system.memory": 67.73, "system.disk": 88.3, "system.proc.memory.availableMB": 5249.35, "system.proc.memory.rssMB": 2608.14, "system.proc.memory.percent": 16.03, "system.proc.cpu.threads": 20.27, "system.network.sent": 208390, "system.network.recv": 323344, "_wandb": true, "_timestamp": 1575726896, "_runtime": 187}
+{"system.gpu.0.gpu": 4.93, "system.gpu.0.memory": 1.07, "system.gpu.0.memory_allocated": 33.14, "system.gpu.0.temp": 37.13, "system.cpu": 30.65, "system.memory": 67.8, "system.disk": 88.3, "system.proc.memory.availableMB": 5238.55, "system.proc.memory.rssMB": 2613.19, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.47, "system.network.sent": 227235, "system.network.recv": 355910, "_wandb": true, "_timestamp": 1575726928, "_runtime": 218}
+{"system.gpu.0.gpu": 6.2, "system.gpu.0.memory": 2.8, "system.gpu.0.memory_allocated": 33.18, "system.gpu.0.temp": 37.87, "system.cpu": 16.89, "system.memory": 67.91, "system.disk": 88.3, "system.proc.memory.availableMB": 5224.12, "system.proc.memory.rssMB": 2613.26, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.27, "system.network.sent": 252669, "system.network.recv": 383256, "_wandb": true, "_timestamp": 1575726959, "_runtime": 249}
+{"system.gpu.0.gpu": 5.0, "system.gpu.0.memory": 1.73, "system.gpu.0.memory_allocated": 33.73, "system.gpu.0.temp": 37.93, "system.cpu": 23.69, "system.memory": 67.95, "system.disk": 88.3, "system.proc.memory.availableMB": 5215.84, "system.proc.memory.rssMB": 2613.63, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.4, "system.network.sent": 269565, "system.network.recv": 402012, "_wandb": true, "_timestamp": 1575726990, "_runtime": 280}
+{"system.gpu.0.gpu": 14.87, "system.gpu.0.memory": 9.67, "system.gpu.0.memory_allocated": 33.86, "system.gpu.0.temp": 37.67, "system.cpu": 13.01, "system.memory": 67.91, "system.disk": 88.3, "system.proc.memory.availableMB": 5218.49, "system.proc.memory.rssMB": 2613.73, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.27, "system.network.sent": 296584, "system.network.recv": 429302, "_wandb": true, "_timestamp": 1575727021, "_runtime": 311}
+{"system.gpu.0.gpu": 17.93, "system.gpu.0.memory": 12.07, "system.gpu.0.memory_allocated": 33.81, "system.gpu.0.temp": 36.6, "system.cpu": 14.49, "system.memory": 68.04, "system.disk": 88.3, "system.proc.memory.availableMB": 5199.16, "system.proc.memory.rssMB": 2613.73, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.0, "system.network.sent": 317335, "system.network.recv": 471427, "_wandb": true, "_timestamp": 1575727052, "_runtime": 342}
+{"system.gpu.0.gpu": 18.07, "system.gpu.0.memory": 12.13, "system.gpu.0.memory_allocated": 33.69, "system.gpu.0.temp": 36.0, "system.cpu": 13.33, "system.memory": 68.1, "system.disk": 88.3, "system.proc.memory.availableMB": 5196.66, "system.proc.memory.rssMB": 2613.73, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.0, "system.network.sent": 341174, "system.network.recv": 490326, "_wandb": true, "_timestamp": 1575727083, "_runtime": 373}
+{"system.gpu.0.gpu": 17.93, "system.gpu.0.memory": 12.07, "system.gpu.0.memory_allocated": 33.69, "system.gpu.0.temp": 35.27, "system.cpu": 14.13, "system.memory": 67.89, "system.disk": 88.3, "system.proc.memory.availableMB": 5224.0, "system.proc.memory.rssMB": 2613.72, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 14.2, "system.network.sent": 357799, "system.network.recv": 512115, "_wandb": true, "_timestamp": 1575727114, "_runtime": 404}
+{"system.gpu.0.gpu": 18.2, "system.gpu.0.memory": 12.2, "system.gpu.0.memory_allocated": 33.69, "system.gpu.0.temp": 35.0, "system.cpu": 13.96, "system.memory": 67.82, "system.disk": 88.3, "system.proc.memory.availableMB": 5234.39, "system.proc.memory.rssMB": 2613.71, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 14.0, "system.network.sent": 390088, "system.network.recv": 546092, "_wandb": true, "_timestamp": 1575727146, "_runtime": 436}
+{"system.gpu.0.gpu": 18.0, "system.gpu.0.memory": 12.0, "system.gpu.0.memory_allocated": 33.69, "system.gpu.0.temp": 34.73, "system.cpu": 14.47, "system.memory": 67.88, "system.disk": 88.3, "system.proc.memory.availableMB": 5231.84, "system.proc.memory.rssMB": 2613.71, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 14.0, "system.network.sent": 434868, "system.network.recv": 592322, "_wandb": true, "_timestamp": 1575727177, "_runtime": 467}
+{"system.gpu.0.gpu": 18.13, "system.gpu.0.memory": 12.13, "system.gpu.0.memory_allocated": 33.69, "system.gpu.0.temp": 34.07, "system.cpu": 12.81, "system.memory": 67.89, "system.disk": 88.3, "system.proc.memory.availableMB": 5225.19, "system.proc.memory.rssMB": 2613.71, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 14.0, "system.network.sent": 457315, "system.network.recv": 617982, "_wandb": true, "_timestamp": 1575727208, "_runtime": 498}
+{"system.gpu.0.gpu": 17.93, "system.gpu.0.memory": 11.6, "system.gpu.0.memory_allocated": 33.68, "system.gpu.0.temp": 34.07, "system.cpu": 20.08, "system.memory": 68.1, "system.disk": 88.3, "system.proc.memory.availableMB": 5189.93, "system.proc.memory.rssMB": 2613.71, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 14.0, "system.network.sent": 472300, "system.network.recv": 634685, "_wandb": true, "_timestamp": 1575727239, "_runtime": 529}
+{"system.gpu.0.gpu": 14.07, "system.gpu.0.memory": 7.07, "system.gpu.0.memory_allocated": 33.55, "system.gpu.0.temp": 34.6, "system.cpu": 38.06, "system.memory": 68.34, "system.disk": 88.3, "system.proc.memory.availableMB": 5150.25, "system.proc.memory.rssMB": 2614.18, "system.proc.memory.percent": 16.06, "system.proc.cpu.threads": 15.07, "system.network.sent": 502072, "system.network.recv": 664564, "_wandb": true, "_timestamp": 1575727270, "_runtime": 560}
+{"system.gpu.0.gpu": 9.8, "system.gpu.0.memory": 1.13, "system.gpu.0.memory_allocated": 36.22, "system.gpu.0.temp": 36.13, "system.cpu": 55.6, "system.memory": 68.67, "system.disk": 88.3, "system.proc.memory.availableMB": 5101.13, "system.proc.memory.rssMB": 2642.89, "system.proc.memory.percent": 16.24, "system.proc.cpu.threads": 16.53, "system.network.sent": 628931, "system.network.recv": 829476, "_wandb": true, "_timestamp": 1575727301, "_runtime": 591}
+{"system.gpu.0.gpu": 15.13, "system.gpu.0.memory": 1.53, "system.gpu.0.memory_allocated": 40.63, "system.gpu.0.temp": 37.0, "system.cpu": 68.42, "system.memory": 69.98, "system.disk": 88.3, "system.proc.memory.availableMB": 4883.93, "system.proc.memory.rssMB": 2658.73, "system.proc.memory.percent": 16.34, "system.proc.cpu.threads": 17.07, "system.network.sent": 1032614, "system.network.recv": 1040214, "_wandb": true, "_timestamp": 1575727332, "_runtime": 623}
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-history.jsonl b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-history.jsonl
new file mode 100644
index 0000000..ab52499
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-history.jsonl
@@ -0,0 +1,5 @@
+{"loss": 819.302734375, "loss2": 2513.72265625, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 599.6713848114014, "_timestamp": 1575727290.5000477, "_step": 1}
+{"loss": 38059.4296875, "loss2": 268866.3125, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 609.4495651721954, "_timestamp": 1575727300.278228, "_step": 2}
+{"loss": NaN, "loss2": 3061.068115234375, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 621.2390244007111, "_timestamp": 1575727312.0676873, "_step": 3}
+{"loss": NaN, "loss2": 744.3806762695312, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 632.6197669506073, "_timestamp": 1575727323.4484298, "_step": 4}
+{"loss": NaN, "loss2": 174.62261962890625, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 644.111624956131, "_timestamp": 1575727334.9402878, "_step": 5}
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-metadata.json b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-metadata.json
new file mode 100644
index 0000000..a6e72fe
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T13:51:49.791917",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:02:16.624249"
+}
diff --git a/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-summary.json b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-summary.json
new file mode 100644
index 0000000..f6ba910
--- /dev/null
+++ b/src/test/wandb/run-20191207_135147-2zj9hp3t/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "epsilon": 0.8999999761581421,
+    "loss": NaN,
+    "_timestamp": 1575727334.9402878,
+    "loss2": 174.62261962890625,
+    "_runtime": 644.111624956131,
+    "train_winning_ratio": 0.0,
+    "_step": 5
+}
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/config.yaml b/src/test/wandb/run-20191207_140403-4tb3becj/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/diff.patch b/src/test/wandb/run-20191207_140403-4tb3becj/diff.patch
new file mode 100644
index 0000000..e1e77ec
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/diff.patch
@@ -0,0 +1,176 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..ba66425 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..54ccd60 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,20 +1,34 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+-        runner.sample(1)
++        runner.sample(5)
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/output.log b/src/test/wandb/run-20191207_140403-4tb3becj/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/requirements.txt b/src/test/wandb/run-20191207_140403-4tb3becj/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/wandb-events.jsonl b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-events.jsonl
new file mode 100644
index 0000000..6a4ab41
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-events.jsonl
@@ -0,0 +1,4 @@
+{"system.gpu.0.gpu": 19.13, "system.gpu.0.memory": 6.33, "system.gpu.0.memory_allocated": 32.0, "system.gpu.0.temp": 35.67, "system.cpu": 69.4, "system.memory": 63.49, "system.disk": 88.3, "system.proc.memory.availableMB": 5940.21, "system.proc.memory.rssMB": 1664.57, "system.proc.memory.percent": 10.23, "system.proc.cpu.threads": 15.6, "system.network.sent": 273198, "system.network.recv": 411948, "_wandb": true, "_timestamp": 1575727475, "_runtime": 31}
+{"system.gpu.0.gpu": 15.53, "system.gpu.0.memory": 2.4, "system.gpu.0.memory_allocated": 50.05, "system.gpu.0.temp": 36.93, "system.cpu": 78.57, "system.memory": 69.72, "system.disk": 88.3, "system.proc.memory.availableMB": 4927.93, "system.proc.memory.rssMB": 2617.37, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 19.0, "system.network.sent": 789632, "system.network.recv": 1135911, "_wandb": true, "_timestamp": 1575727506, "_runtime": 62}
+{"system.gpu.0.gpu": 15.4, "system.gpu.0.memory": 2.33, "system.gpu.0.memory_allocated": 62.85, "system.gpu.0.temp": 37.87, "system.cpu": 88.95, "system.memory": 70.13, "system.disk": 88.31, "system.proc.memory.availableMB": 4862.18, "system.proc.memory.rssMB": 2629.58, "system.proc.memory.percent": 16.16, "system.proc.cpu.threads": 18.87, "system.network.sent": 2070069, "system.network.recv": 42911867, "_wandb": true, "_timestamp": 1575727538, "_runtime": 94}
+{"system.gpu.0.gpu": 15.6, "system.gpu.0.memory": 3.2, "system.gpu.0.memory_allocated": 70.8, "system.gpu.0.temp": 38.53, "system.cpu": 90.04, "system.memory": 70.98, "system.disk": 88.37, "system.proc.memory.availableMB": 4722.42, "system.proc.memory.rssMB": 2638.0, "system.proc.memory.percent": 16.21, "system.proc.cpu.threads": 17.33, "system.network.sent": 2195876, "system.network.recv": 43095448, "_wandb": true, "_timestamp": 1575727570, "_runtime": 126}
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/wandb-history.jsonl b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-history.jsonl
new file mode 100644
index 0000000..47adb7b
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-history.jsonl
@@ -0,0 +1,6 @@
+{"loss": 8546.4921875, "loss2": 81279.125, "train_winning_ratio": 0.08100000000000002, "epsilon": 0.8999999761581421, "_runtime": 59.69597554206848, "_timestamp": 1575727483.1198506, "_step": 1}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.04782969000000002, "epsilon": 0.8999999761581421, "_runtime": 78.78605270385742, "_timestamp": 1575727502.2099278, "_step": 2}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.028242953648100012, "epsilon": 0.8999999761581421, "_runtime": 97.78781771659851, "_timestamp": 1575727521.2116928, "_step": 3}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.01667718169966658, "epsilon": 0.8999999761581421, "_runtime": 121.84828758239746, "_timestamp": 1575727545.2721627, "_step": 4}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.009847709021836121, "epsilon": 0.8999999761581421, "_runtime": 144.84439611434937, "_timestamp": 1575727568.2682712, "_step": 5}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.005814973700304013, "epsilon": 0.8999999761581421, "_runtime": 165.54480862617493, "_timestamp": 1575727588.9686837, "_step": 6}
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/wandb-metadata.json b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-metadata.json
new file mode 100644
index 0000000..43da097
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:04:03.871416",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:06:14.748871"
+}
diff --git a/src/test/wandb/run-20191207_140403-4tb3becj/wandb-summary.json b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-summary.json
new file mode 100644
index 0000000..0896fe0
--- /dev/null
+++ b/src/test/wandb/run-20191207_140403-4tb3becj/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "loss2": NaN,
+    "loss": NaN,
+    "epsilon": 0.8999999761581421,
+    "_runtime": 165.54480862617493,
+    "train_winning_ratio": 0.005814973700304013,
+    "_step": 6,
+    "_timestamp": 1575727588.9686837
+}
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/config.yaml b/src/test/wandb/run-20191207_140736-mw3mcwd4/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/diff.patch b/src/test/wandb/run-20191207_140736-mw3mcwd4/diff.patch
new file mode 100644
index 0000000..7f61d39
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/diff.patch
@@ -0,0 +1,175 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..ba66425 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softplus(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/output.log b/src/test/wandb/run-20191207_140736-mw3mcwd4/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/requirements.txt b/src/test/wandb/run-20191207_140736-mw3mcwd4/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-events.jsonl b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-events.jsonl
new file mode 100644
index 0000000..916273f
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-events.jsonl
@@ -0,0 +1,10 @@
+{"system.gpu.0.gpu": 12.67, "system.gpu.0.memory": 3.4, "system.gpu.0.memory_allocated": 30.98, "system.gpu.0.temp": 37.87, "system.cpu": 48.63, "system.memory": 67.26, "system.disk": 88.4, "system.proc.memory.availableMB": 5326.76, "system.proc.memory.rssMB": 2106.97, "system.proc.memory.percent": 12.95, "system.proc.cpu.threads": 20.27, "system.network.sent": 155652, "system.network.recv": 193564, "_wandb": true, "_timestamp": 1575727690, "_runtime": 31}
+{"system.gpu.0.gpu": 19.2, "system.gpu.0.memory": 10.27, "system.gpu.0.memory_allocated": 33.97, "system.gpu.0.temp": 37.6, "system.cpu": 18.12, "system.memory": 70.1, "system.disk": 88.4, "system.proc.memory.availableMB": 4866.18, "system.proc.memory.rssMB": 2616.69, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 21.8, "system.network.sent": 253543, "system.network.recv": 282509, "_wandb": true, "_timestamp": 1575727721, "_runtime": 62}
+{"system.gpu.0.gpu": 20.6, "system.gpu.0.memory": 10.07, "system.gpu.0.memory_allocated": 33.97, "system.gpu.0.temp": 37.53, "system.cpu": 31.99, "system.memory": 69.97, "system.disk": 88.4, "system.proc.memory.availableMB": 4889.0, "system.proc.memory.rssMB": 2616.64, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 19.0, "system.network.sent": 328289, "system.network.recv": 364460, "_wandb": true, "_timestamp": 1575727752, "_runtime": 93}
+{"system.gpu.0.gpu": 4.8, "system.gpu.0.memory": 1.0, "system.gpu.0.memory_allocated": 33.97, "system.gpu.0.temp": 38.13, "system.cpu": 30.56, "system.memory": 69.93, "system.disk": 88.4, "system.proc.memory.availableMB": 4893.57, "system.proc.memory.rssMB": 2616.67, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 18.33, "system.network.sent": 402225, "system.network.recv": 439985, "_wandb": true, "_timestamp": 1575727783, "_runtime": 124}
+{"system.gpu.0.gpu": 10.47, "system.gpu.0.memory": 4.0, "system.gpu.0.memory_allocated": 33.97, "system.gpu.0.temp": 38.73, "system.cpu": 23.27, "system.memory": 70.01, "system.disk": 88.4, "system.proc.memory.availableMB": 4879.6, "system.proc.memory.rssMB": 2616.64, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 17.0, "system.network.sent": 485756, "system.network.recv": 524743, "_wandb": true, "_timestamp": 1575727813, "_runtime": 155}
+{"system.gpu.0.gpu": 5.33, "system.gpu.0.memory": 1.0, "system.gpu.0.memory_allocated": 33.97, "system.gpu.0.temp": 39.0, "system.cpu": 30.45, "system.memory": 69.97, "system.disk": 88.4, "system.proc.memory.availableMB": 4888.32, "system.proc.memory.rssMB": 2616.74, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 17.53, "system.network.sent": 564592, "system.network.recv": 604658, "_wandb": true, "_timestamp": 1575727844, "_runtime": 186}
+{"system.gpu.0.gpu": 18.67, "system.gpu.0.memory": 8.47, "system.gpu.0.memory_allocated": 34.2, "system.gpu.0.temp": 38.73, "system.cpu": 39.49, "system.memory": 70.23, "system.disk": 88.4, "system.proc.memory.availableMB": 4845.85, "system.proc.memory.rssMB": 2616.51, "system.proc.memory.percent": 16.08, "system.proc.cpu.threads": 17.27, "system.network.sent": 813554, "system.network.recv": 771879, "_wandb": true, "_timestamp": 1575727876, "_runtime": 217}
+{"system.gpu.0.gpu": 15.13, "system.gpu.0.memory": 1.47, "system.gpu.0.memory_allocated": 35.61, "system.gpu.0.temp": 39.07, "system.cpu": 68.63, "system.memory": 70.75, "system.disk": 88.4, "system.proc.memory.availableMB": 4759.65, "system.proc.memory.rssMB": 2630.66, "system.proc.memory.percent": 16.16, "system.proc.cpu.threads": 17.2, "system.network.sent": 1089291, "system.network.recv": 1039749, "_wandb": true, "_timestamp": 1575727907, "_runtime": 248}
+{"system.gpu.0.gpu": 18.07, "system.gpu.0.memory": 1.87, "system.gpu.0.memory_allocated": 38.33, "system.gpu.0.temp": 39.93, "system.cpu": 60.02, "system.memory": 70.42, "system.disk": 88.4, "system.proc.memory.availableMB": 4816.64, "system.proc.memory.rssMB": 2642.59, "system.proc.memory.percent": 16.24, "system.proc.cpu.threads": 17.27, "system.network.sent": 1192391, "system.network.recv": 1232975, "_wandb": true, "_timestamp": 1575727938, "_runtime": 279}
+{"system.gpu.0.gpu": 16.47, "system.gpu.0.memory": 1.6, "system.gpu.0.memory_allocated": 40.28, "system.gpu.0.temp": 40.0, "system.cpu": 63.61, "system.memory": 70.73, "system.disk": 88.4, "system.proc.memory.availableMB": 4764.45, "system.proc.memory.rssMB": 2653.55, "system.proc.memory.percent": 16.31, "system.proc.cpu.threads": 17.33, "system.network.sent": 1284775, "system.network.recv": 1360016, "_wandb": true, "_timestamp": 1575727969, "_runtime": 310}
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-history.jsonl b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-history.jsonl
new file mode 100644
index 0000000..9ed1b2a
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-history.jsonl
@@ -0,0 +1,11 @@
+{"loss": 1705.0465087890625, "loss2": 702.7794189453125, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 244.8703064918518, "_timestamp": 1575727879.1860688, "_step": 1}
+{"loss": 31521.99609375, "loss2": 25771.80859375, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 253.48888516426086, "_timestamp": 1575727887.8046474, "_step": 2}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 261.63143014907837, "_timestamp": 1575727895.9471924, "_step": 3}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 270.2987947463989, "_timestamp": 1575727904.614557, "_step": 4}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 279.12474393844604, "_timestamp": 1575727913.4405062, "_step": 5}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 287.94599652290344, "_timestamp": 1575727922.2617588, "_step": 6}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 296.98413944244385, "_timestamp": 1575727931.2999017, "_step": 7}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 306.0934100151062, "_timestamp": 1575727940.4091723, "_step": 8}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 317.20736813545227, "_timestamp": 1575727951.5231304, "_step": 9}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 327.0997314453125, "_timestamp": 1575727961.4154937, "_step": 10}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 336.95961928367615, "_timestamp": 1575727971.2753816, "_step": 11}
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-metadata.json b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-metadata.json
new file mode 100644
index 0000000..f675b1b
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:07:38.667013",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:12:45.234640"
+}
diff --git a/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-summary.json b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-summary.json
new file mode 100644
index 0000000..89899c1
--- /dev/null
+++ b/src/test/wandb/run-20191207_140736-mw3mcwd4/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "_timestamp": 1575727971.2753816,
+    "_step": 11,
+    "train_winning_ratio": 0.0,
+    "epsilon": 0.8999999761581421,
+    "loss": NaN,
+    "_runtime": 336.95961928367615,
+    "loss2": NaN
+}
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/config.yaml b/src/test/wandb/run-20191207_141318-m7ni2gzi/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/diff.patch b/src/test/wandb/run-20191207_141318-m7ni2gzi/diff.patch
new file mode 100644
index 0000000..62b7965
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/diff.patch
@@ -0,0 +1,175 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..819821b 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softmax(sup_ws)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/output.log b/src/test/wandb/run-20191207_141318-m7ni2gzi/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/requirements.txt b/src/test/wandb/run-20191207_141318-m7ni2gzi/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-events.jsonl b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-events.jsonl
new file mode 100644
index 0000000..03777f5
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-events.jsonl
@@ -0,0 +1 @@
+{"system.gpu.0.gpu": 18.93, "system.gpu.0.memory": 4.6, "system.gpu.0.memory_allocated": 32.67, "system.gpu.0.temp": 39.87, "system.cpu": 78.4, "system.memory": 67.33, "system.disk": 88.4, "system.proc.memory.availableMB": 5318.01, "system.proc.memory.rssMB": 2019.52, "system.proc.memory.percent": 12.41, "system.proc.cpu.threads": 16.13, "system.network.sent": 800046, "system.network.recv": 836718, "_wandb": true, "_timestamp": 1575728031, "_runtime": 31}
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-history.jsonl b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-history.jsonl
new file mode 100644
index 0000000..a3bb835
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-history.jsonl
@@ -0,0 +1,4 @@
+{"loss": 48930.5859375, "loss2": 25361.41796875, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 47.28518748283386, "_timestamp": 1575728026.347341, "_step": 1}
+{"loss": NaN, "loss2": 222.90274047851562, "train_winning_ratio": 0.1, "epsilon": 0.8999999761581421, "_runtime": 57.081462383270264, "_timestamp": 1575728036.143616, "_step": 2}
+{"loss": NaN, "loss2": 41.314273834228516, "train_winning_ratio": 0.09000000000000001, "epsilon": 0.8999999761581421, "_runtime": 67.6087863445282, "_timestamp": 1575728046.67094, "_step": 3}
+{"loss": NaN, "loss2": 135.91024780273438, "train_winning_ratio": 0.08100000000000002, "epsilon": 0.8999999761581421, "_runtime": 77.97741913795471, "_timestamp": 1575728057.0395727, "_step": 4}
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-metadata.json b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-metadata.json
new file mode 100644
index 0000000..ab1f1c3
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:13:19.199266",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:14:09.653560"
+}
diff --git a/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-summary.json b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-summary.json
new file mode 100644
index 0000000..75a55ca
--- /dev/null
+++ b/src/test/wandb/run-20191207_141318-m7ni2gzi/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "epsilon": 0.8999999761581421,
+    "_runtime": 77.97741913795471,
+    "loss2": 135.91024780273438,
+    "loss": NaN,
+    "_step": 4,
+    "train_winning_ratio": 0.08100000000000002,
+    "_timestamp": 1575728057.0395727
+}
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/config.yaml b/src/test/wandb/run-20191207_141440-2auurwlh/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/diff.patch b/src/test/wandb/run-20191207_141440-2auurwlh/diff.patch
new file mode 100644
index 0000000..25882bf
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/diff.patch
@@ -0,0 +1,175 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..6d815a3 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softmax(sup_ws, dim=1)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..b25ba43 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,11 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/output.log b/src/test/wandb/run-20191207_141440-2auurwlh/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/requirements.txt b/src/test/wandb/run-20191207_141440-2auurwlh/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/wandb-events.jsonl b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-events.jsonl
new file mode 100644
index 0000000..ff5682e
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-events.jsonl
@@ -0,0 +1,2 @@
+{"system.gpu.0.gpu": 18.8, "system.gpu.0.memory": 3.47, "system.gpu.0.memory_allocated": 32.78, "system.gpu.0.temp": 39.87, "system.cpu": 64.84, "system.memory": 67.05, "system.disk": 88.4, "system.proc.memory.availableMB": 5362.12, "system.proc.memory.rssMB": 2081.43, "system.proc.memory.percent": 12.79, "system.proc.cpu.threads": 16.27, "system.network.sent": 179788, "system.network.recv": 307965, "_wandb": true, "_timestamp": 1575728112, "_runtime": 31}
+{"system.gpu.0.gpu": 16.2, "system.gpu.0.memory": 1.6, "system.gpu.0.memory_allocated": 39.25, "system.gpu.0.temp": 40.0, "system.cpu": 69.72, "system.memory": 70.17, "system.disk": 88.4, "system.proc.memory.availableMB": 4854.78, "system.proc.memory.rssMB": 2604.19, "system.proc.memory.percent": 16.0, "system.proc.cpu.threads": 17.27, "system.network.sent": 511472, "system.network.recv": 760049, "_wandb": true, "_timestamp": 1575728143, "_runtime": 62}
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/wandb-history.jsonl b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-history.jsonl
new file mode 100644
index 0000000..a96a096
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-history.jsonl
@@ -0,0 +1,5 @@
+{"loss": 7186.31005859375, "loss2": 1307.679443359375, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 41.598381757736206, "_timestamp": 1575728103.5418289, "_step": 1}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 50.366074085235596, "_timestamp": 1575728112.3095212, "_step": 2}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 59.565041065216064, "_timestamp": 1575728121.5084882, "_step": 3}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.1, "epsilon": 0.8999999761581421, "_runtime": 67.58323335647583, "_timestamp": 1575728129.5266805, "_step": 4}
+{"loss": NaN, "loss2": NaN, "train_winning_ratio": 0.09000000000000001, "epsilon": 0.8999999761581421, "_runtime": 78.52908086776733, "_timestamp": 1575728140.472528, "_step": 5}
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/wandb-metadata.json b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-metadata.json
new file mode 100644
index 0000000..8d273d7
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:14:40.735814",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:15:47.470525"
+}
diff --git a/src/test/wandb/run-20191207_141440-2auurwlh/wandb-summary.json b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-summary.json
new file mode 100644
index 0000000..ffdccd0
--- /dev/null
+++ b/src/test/wandb/run-20191207_141440-2auurwlh/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "_runtime": 78.52908086776733,
+    "epsilon": 0.8999999761581421,
+    "_timestamp": 1575728140.472528,
+    "_step": 5,
+    "loss": NaN,
+    "train_winning_ratio": 0.09000000000000001,
+    "loss2": NaN
+}
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/config.yaml b/src/test/wandb/run-20191207_141633-wjf8oaf8/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/diff.patch b/src/test/wandb/run-20191207_141633-wjf8oaf8/diff.patch
new file mode 100644
index 0000000..e44c7c2
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/diff.patch
@@ -0,0 +1,179 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..6d815a3 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softmax(sup_ws, dim=1)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..f3d2c1d 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,15 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++
++        print(iters)
++        print(fit_return_dict)
++
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/output.log b/src/test/wandb/run-20191207_141633-wjf8oaf8/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/requirements.txt b/src/test/wandb/run-20191207_141633-wjf8oaf8/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-events.jsonl b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-events.jsonl
new file mode 100644
index 0000000..801e544
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-events.jsonl
@@ -0,0 +1 @@
+{"system.gpu.0.gpu": 20.8, "system.gpu.0.memory": 3.07, "system.gpu.0.memory_allocated": 30.96, "system.gpu.0.temp": 39.53, "system.cpu": 84.73, "system.memory": 66.34, "system.disk": 88.4, "system.proc.memory.availableMB": 5476.99, "system.proc.memory.rssMB": 1898.59, "system.proc.memory.percent": 11.67, "system.proc.cpu.threads": 16.2, "system.network.sent": 275894, "system.network.recv": 463065, "_wandb": true, "_timestamp": 1575728230, "_runtime": 34}
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-history.jsonl b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-history.jsonl
new file mode 100644
index 0000000..0814cb6
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-history.jsonl
@@ -0,0 +1 @@
+{"loss": 18883.048828125, "loss2": 7344.7822265625, "train_winning_ratio": 0.0, "epsilon": 0.8999999761581421, "_runtime": 66.87861204147339, "_timestamp": 1575728236.0480745, "_step": 1}
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-metadata.json b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-metadata.json
new file mode 100644
index 0000000..2c88b62
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:16:35.115852",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:17:11.559644"
+}
diff --git a/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-summary.json b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-summary.json
new file mode 100644
index 0000000..16a38d1
--- /dev/null
+++ b/src/test/wandb/run-20191207_141633-wjf8oaf8/wandb-summary.json
@@ -0,0 +1,9 @@
+{
+    "epsilon": 0.8999999761581421,
+    "loss2": 7344.7822265625,
+    "_step": 1,
+    "train_winning_ratio": 0.0,
+    "_timestamp": 1575728236.0480745,
+    "_runtime": 66.87861204147339,
+    "loss": 18883.048828125
+}
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/config.yaml b/src/test/wandb/run-20191207_141808-uq6tvwsq/config.yaml
new file mode 100644
index 0000000..68962a9
--- /dev/null
+++ b/src/test/wandb/run-20191207_141808-uq6tvwsq/config.yaml
@@ -0,0 +1,400 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    cli_version: 0.8.13
+    is_jupyter_run: false
+    python_version: 3.7.4
+multistepqnet multistepgnn curr_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn curr_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn curr_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn curr_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn curr_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn curr_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn curr_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn curr_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn curr_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn curr_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn curr_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn curr_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_enc edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+multistepqnet multistepgnn hist_enc hidden_node_dim:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc init_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc input_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+multistepqnet multistepgnn hist_enc num_hidden_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_enc output_node_dim:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_enc updater_conf activation:
+  desc: null
+  value: mish
+multistepqnet multistepgnn hist_enc updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet multistepgnn hist_enc updater_conf input_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf normalization:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet multistepgnn hist_enc updater_conf out_activation:
+  desc: null
+  value: null
+multistepqnet multistepgnn hist_enc updater_conf output_dimension:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_enc updater_conf use_noisy:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc updater_conf weight_init:
+  desc: null
+  value: xavier
+multistepqnet multistepgnn hist_enc use_concat:
+  desc: null
+  value: false
+multistepqnet multistepgnn hist_enc use_residual:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn batch_first:
+  desc: null
+  value: true
+multistepqnet multistepgnn hist_rnn hidden_size:
+  desc: null
+  value: 32
+multistepqnet multistepgnn hist_rnn input_size:
+  desc: null
+  value: 19
+multistepqnet multistepgnn hist_rnn num_layers:
+  desc: null
+  value: 2
+multistepqnet multistepgnn hist_rnn rnn_type:
+  desc: null
+  value: GRU
+multistepqnet qnet attack_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet attack_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet attack_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet attack_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet attack_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet attack_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet attack_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet attack_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet move_module activation:
+  desc: null
+  value: mish
+multistepqnet qnet move_module dropout_probability:
+  desc: null
+  value: 0.0
+multistepqnet qnet move_module input_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module normalization:
+  desc: null
+  value: null
+multistepqnet qnet move_module num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+multistepqnet qnet move_module out_activation:
+  desc: null
+  value: null
+multistepqnet qnet move_module output_dimension:
+  desc: null
+  value: 32
+multistepqnet qnet move_module use_noisy:
+  desc: null
+  value: false
+multistepqnet qnet move_module weight_init:
+  desc: null
+  value: xavier
+multistepqnet qnet qnet ally_node_type_index:
+  desc: null
+  value: 0
+multistepqnet qnet qnet attack_edge_type_index:
+  desc: null
+  value: 1
+multistepqnet qnet qnet exploration_method:
+  desc: null
+  value: eps_greedy
+qmixagnet fit batch_size:
+  desc: null
+  value: 256
+qmixagnet fit hist_num_time_steps:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory N:
+  desc: null
+  value: 2
+qmixagnet nstepmemory memory gamma:
+  desc: null
+  value: 0.9
+qmixagnet nstepmemory memory max_n_episodes:
+  desc: null
+  value: 3000
+qmixagnet nstepmemory memory max_traj_len:
+  desc: null
+  value: 30
+qmixagnet nstepmemory memory use_return:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain eps:
+  desc: null
+  value: 0.9
+qmixagnet qmixbrain brain eps_gamma:
+  desc: null
+  value: 0.995
+qmixagnet qmixbrain brain eps_min:
+  desc: null
+  value: 0.01
+qmixagnet qmixbrain brain gamma:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain brain lr:
+  desc: null
+  value: 1.0e-05
+qmixagnet qmixbrain brain optimizer:
+  desc: null
+  value: lookahead
+qmixagnet qmixbrain brain use_clipped_q:
+  desc: null
+  value: true
+qmixagnet qmixbrain brain use_double_q:
+  desc: null
+  value: false
+qmixagnet qmixbrain fit auto_norm_clip:
+  desc: null
+  value: true
+qmixagnet qmixbrain fit auto_norm_clip_base_val:
+  desc: null
+  value: 0.1
+qmixagnet qmixbrain fit norm_clip_val:
+  desc: null
+  value: 1.0
+qmixagnet qmixbrain fit tau:
+  desc: null
+  value: 0.1
+qmixagnet qmixnetwork supmixer_gc bias:
+  desc: null
+  value: true
+qmixagnet qmixnetwork supmixer_gc in_features:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_gc out_features:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp activation:
+  desc: null
+  value: mish
+qmixagnet qmixnetwork supmixer_mlp dropout_probability:
+  desc: null
+  value: 0.0
+qmixagnet qmixnetwork supmixer_mlp input_dimension:
+  desc: null
+  value: 51
+qmixagnet qmixnetwork supmixer_mlp normalization:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixagnet qmixnetwork supmixer_mlp out_activation:
+  desc: null
+  value: null
+qmixagnet qmixnetwork supmixer_mlp output_dimension:
+  desc: null
+  value: 1
+qmixagnet qmixnetwork supmixer_mlp use_noisy:
+  desc: null
+  value: false
+qmixagnet qmixnetwork supmixer_mlp weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer b_net activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer b_net dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer b_net input_dimension:
+  desc: null
+  value: 51
+qmixnetwork qmixer b_net normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer b_net out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer b_net output_dimension:
+  desc: null
+  value: 3
+qmixnetwork qmixer b_net use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer b_net weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer mixer num_clusters:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net edge_types:
+  desc: null
+  value:
+  - 0
+  - 1
+  - 2
+qmixnetwork qmixer w_net hidden_node_dim:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net init_node_dim:
+  desc: null
+  value: 19
+qmixnetwork qmixer w_net input_node_dim:
+  desc: null
+  value: 51
+qmixnetwork qmixer w_net node_types:
+  desc: null
+  value:
+  - 0
+  - 1
+qmixnetwork qmixer w_net num_hidden_layers:
+  desc: null
+  value: 2
+qmixnetwork qmixer w_net output_node_dim:
+  desc: null
+  value: 3
+qmixnetwork qmixer w_net updater_conf activation:
+  desc: null
+  value: mish
+qmixnetwork qmixer w_net updater_conf dropout_probability:
+  desc: null
+  value: 0.0
+qmixnetwork qmixer w_net updater_conf input_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf normalization:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf num_neurons:
+  desc: null
+  value:
+  - 64
+  - 64
+qmixnetwork qmixer w_net updater_conf out_activation:
+  desc: null
+  value: null
+qmixnetwork qmixer w_net updater_conf output_dimension:
+  desc: null
+  value: 32
+qmixnetwork qmixer w_net updater_conf use_noisy:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net updater_conf weight_init:
+  desc: null
+  value: xavier
+qmixnetwork qmixer w_net use_concat:
+  desc: null
+  value: false
+qmixnetwork qmixer w_net use_residual:
+  desc: null
+  value: true
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/diff.patch b/src/test/wandb/run-20191207_141808-uq6tvwsq/diff.patch
new file mode 100644
index 0000000..e44c7c2
--- /dev/null
+++ b/src/test/wandb/run-20191207_141808-uq6tvwsq/diff.patch
@@ -0,0 +1,179 @@
+diff --git a/src/agent/QmixAgent.py b/src/agent/QmixAgent.py
+index 8450223..f53dd33 100644
+--- a/src/agent/QmixAgent.py
++++ b/src/agent/QmixAgent.py
+@@ -12,6 +12,7 @@ from src.util.graph_util import get_largest_number_of_enemy_nodes
+ from src.config.ConfigBase import ConfigBase
+ from src.memory.MemoryBase import NstepMemoryConfig, NstepMemory
+ 
++
+ class QmixAgentConfig(ConfigBase):
+     def __init__(self, name='qmixagnet', qnet_conf=None, mixer_conf=None, brain_conf=None, fit_conf=None,
+                  buffer_conf=None):
+diff --git a/src/brain/QmixBrain.py b/src/brain/QmixBrain.py
+index 17cd6d6..affbcda 100644
+--- a/src/brain/QmixBrain.py
++++ b/src/brain/QmixBrain.py
+@@ -23,8 +23,9 @@ class QmixBrainConfig(ConfigBase):
+ 
+         self.fit = {
+             'tau': 0.1,
+-            'auto_norm_clip': False,
+-            'auto_norm_clip_base_val': 0.1
++            'auto_norm_clip': True,
++            'auto_norm_clip_base_val': 0.1,
++            'norm_clip_val': 1.0
+         }
+ 
+ 
+@@ -91,7 +92,7 @@ class QmixBrain(BrainBase):
+             qs, _ = qs.max(dim=1)
+         else:
+             qs = qs.gather(-1, actions.unsqueeze(-1).long()).squeeze(dim=-1)
+-        q_tot = mixer(inputs['curr_graph'], inputs['curr_feature'], qs)
++        q_tot = mixer(inputs['curr_graph'], q_dict['hidden_feat'], qs)
+         return q_tot
+ 
+     @staticmethod
+@@ -103,7 +104,7 @@ class QmixBrain(BrainBase):
+         target_q_dict = target_qnet.compute_qs(**inputs)
+         target_q = target_q_dict['qs']
+         target_q = target_q.gather(-1, actions.unsqueeze(-1).long()).suqeeze(dim=-1)
+-        target_q_tot = target_mixer(inputs['curr_graph'], inputs['curr_feature'], target_q)
++        target_q_tot = target_mixer(inputs['curr_graph'], target_q_dict['hidden_feat'], target_q)
+         return target_q_tot
+ 
+     def fit(self, curr_inputs, next_inputs, actions, rewards, dones):
+diff --git a/src/memory/MemoryBase.py b/src/memory/MemoryBase.py
+index 7bac0ed..0d19849 100644
+--- a/src/memory/MemoryBase.py
++++ b/src/memory/MemoryBase.py
+@@ -19,6 +19,9 @@ class NstepMemoryConfig(ConfigBase):
+             'N': 2
+         }
+ 
++    def __call__(self, base_prefix):
++        return super(NstepMemoryConfig, self).__call__(pass_arg='spec', base_prefix=base_prefix)
++
+ 
+ class NstepMemory:
+     def __init__(self, conf):
+diff --git a/src/rl/QmixNetwork.py b/src/rl/QmixNetwork.py
+index 0516700..6d815a3 100644
+--- a/src/rl/QmixNetwork.py
++++ b/src/rl/QmixNetwork.py
+@@ -13,10 +13,12 @@ class QmixNetworkConfig(ConfigBase):
+         super(QmixNetworkConfig, self).__init__(name=name, submixer=submixer_conf, supmixer_gc=supmixer_gc_conf,
+                                                 supmixer_mlp=supmixer_mlp_conf)
+         self.submixer = QmixerConfig()
+-        self.supmixer_gc = {'in_features': 19,
++        self.supmixer_gc = {'in_features': 51,
+                             'out_features': 1,
+                             'bias': True}
+         self.supmixer_mlp = MLPConfig().mlp
++        self.supmixer_mlp['input_dimension'] = 51
++        self.supmixer_mlp['output_dimension'] = 1
+ 
+ 
+ class QmixNetwork(torch.nn.Module):
+@@ -50,19 +52,15 @@ class QmixNetwork(torch.nn.Module):
+         #### slow implementation ####
+ 
+         sup_ws = self.supmixer(input=aggregated_feat, adj=adj_mats)  # [#. graph x #. clusters x 1]
++        sup_ws = torch.nn.functional.softmax(sup_ws, dim=1)
+ 
+         sup_weighted_qs = sup_ws * aggregated_q.unsqueeze(dim=-1)  # [#. graph x #.cluster x 1]
+         sup_qs = sup_weighted_qs.sum(dim=1)
+ 
+-        if isinstance(graph, dgl.BatchedDGLGraph):
+-            num_graphs = graph.batch_size
+-        else:
+-            num_graphs = 1
+-
+-        sup_q_bs = self.supmixer_b((aggregated_feat.view(num_graphs, -1)))  # [#. graph x  1]
++        sup_q_bs = self.supmixer_b((aggregated_feat.sum(dim=1)))  # [#. graph x  1]
+         sup_qs = sup_qs + sup_q_bs
+ 
+-        return sup_qs
++        return sup_qs.view(-1)
+ 
+ 
+ if __name__ == "__main__":
+diff --git a/src/rl/Qmixer.py b/src/rl/Qmixer.py
+index 93429d0..e09727a 100644
+--- a/src/rl/Qmixer.py
++++ b/src/rl/Qmixer.py
+@@ -10,7 +10,7 @@ from src.config.graph_config import NODE_ALLY
+ from src.config.ConfigBase import ConfigBase
+ 
+ from src.util.graph_util import get_filtered_node_index_by_type
+-from src.util.train_util import dn
++
+ 
+ class QmixerConfig(ConfigBase):
+ 
+@@ -19,10 +19,11 @@ class QmixerConfig(ConfigBase):
+ 
+         self.mixer = {'num_clusters': 3}
+         self.b_net = MLPConfig().mlp
+-        self.b_net['input_dimension'] = 19
++        self.b_net['input_dimension'] = 51
+         self.b_net['output_dimension'] = self.mixer['num_clusters']
+ 
+         self.w_net = RGNConfig().gnn
++        self.w_net['input_node_dim'] = 51
+         self.w_net['output_node_dim'] = self.mixer['num_clusters']
+ 
+ 
+@@ -44,6 +45,7 @@ class Qmixer(nn.Module):
+         ws = self.w_net(graph, node_feature)  # [#. allies x #. clusters]
+         ally_indices = get_filtered_node_index_by_type(graph, NODE_ALLY)
+         ally_ws = ws[ally_indices, :]  # [#. allies x #. clusters]
++        ally_ws = torch.nn.functional.softmax(ally_ws, dim=1)
+         return ally_ws
+ 
+     def get_feat(self, graph, node_feature):
+diff --git a/src/test/test.py b/src/test/test.py
+index 45927dc..f3d2c1d 100644
+--- a/src/test/test.py
++++ b/src/test/test.py
+@@ -1,14 +1,22 @@
++import wandb
++import numpy as np
++
+ from src.runners.RunnerManager import RunnerConfig, RunnerManager
+ from src.agent.QmixAgent import QmixAgent, QmixAgentConfig
+ 
+ if __name__ == '__main__':
+ 
++    exp_name = "qmix_refac"
+     conf = QmixAgentConfig()
+     agent = QmixAgent(conf)
+ 
+     runner_conf = RunnerConfig(agent=agent)
+     runner = RunnerManager(runner_conf)
+ 
++    wandb.init(project="qmix3", name=exp_name)
++    wandb.watch(agent)
++    wandb.config.update(conf())
++
+     iters = 0
+     while iters < 100:
+         iters += 1
+@@ -16,5 +24,15 @@ if __name__ == '__main__':
+         runner.transfer_sample()
+ 
+         agent.to('cuda')
+-        agent.fit(device='cuda')
++        fit_return_dict = agent.fit(device='cuda')
+         agent.to('cpu')
++
++        running_wrs = [runner.env.winning_ratio for runner in runner.runners]
++        running_wr = np.mean(running_wrs)
++
++        print(iters)
++        print(fit_return_dict)
++
++        wandb.log(fit_return_dict, step=iters)
++        wandb.log({'train_winning_ratio': running_wr, 'epsilon': agent.brain.eps}, step=iters)
++
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/output.log b/src/test/wandb/run-20191207_141808-uq6tvwsq/output.log
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/requirements.txt b/src/test/wandb/run-20191207_141808-uq6tvwsq/requirements.txt
new file mode 100644
index 0000000..cd7fef4
--- /dev/null
+++ b/src/test/wandb/run-20191207_141808-uq6tvwsq/requirements.txt
@@ -0,0 +1,118 @@
+aiohttp==3.5.4
+argh==0.26.2
+async-timeout==3.0.1
+attrs==19.1.0
+autopep8==1.4.4
+backcall==0.1.0
+bleach==3.1.0
+certifi==2019.9.11
+chardet==3.0.4
+click==7.0
+colorama==0.4.1
+configparser==4.0.2
+cvxpy==1.1.0a1
+cvxpylayers==0.1.1
+cycler==0.10.0
+decorator==4.4.1
+defusedxml==0.6.0
+dgl-cuda10.0==0.4
+diffcp==1.0.13
+docker-pycreds==0.4.0
+ecos==2.0.7.post1
+entrypoints==0.3
+future==0.17.1
+gitdb2==2.0.6
+gitpython==3.0.4
+gql==0.1.0
+graphql-core==2.2.1
+idna==2.8
+importlib-metadata==0.23
+ipykernel==5.1.3
+ipython-genutils==0.2.0
+ipython==7.9.0
+ipywidgets==7.5.1
+jedi==0.15.1
+jinja2==2.10.3
+jsonschema==3.1.1
+jupyter-client==5.3.4
+jupyter-console==6.0.0
+jupyter-core==4.6.1
+jupyter==1.0.0
+kiwisolver==1.1.0
+markupsafe==1.1.1
+matplotlib==3.1.1
+mistune==0.8.4
+mkl-fft==1.0.14
+mkl-random==1.1.0
+mkl-service==2.3.0
+more-itertools==7.2.0
+multidict==4.5.2
+nbconvert==5.6.1
+nbformat==4.4.0
+networkx==2.4
+notebook==6.0.2
+numpy==1.17.4
+nvidia-ml-py3==7.352.0
+osqp==0.6.1
+pandas==0.25.3
+pandocfilters==1.4.2
+parso==0.5.1
+pathtools==0.1.2
+pickleshare==0.7.5
+pillow==6.2.1
+pip==19.3.1
+portpicker==1.3.1
+prometheus-client==0.7.1
+promise==2.2.1
+prompt-toolkit==2.0.10
+protobuf==3.7.1
+psutil==5.6.3
+pybind11==2.4.3
+pycodestyle==2.5.0
+pyglet==1.3.2
+pygments==2.4.2
+pyparsing==2.4.2
+pyqt5-sip==4.19.18
+pyqt5==5.12.3
+pyqtwebengine==5.12.1
+pyrsistent==0.15.5
+python-dateutil==2.8.1
+python-example==0.0.1
+pytz==2019.3
+pywin32==225
+pywinpty==0.5.5
+pyyaml==5.1.2
+pyzmq==18.1.0
+qtconsole==4.5.5
+requests==2.22.0
+rx==1.6.1
+s2clientprotocol==4.10.3.76114.0
+sc2==0.11.1
+scipy==1.3.1
+scs==2.1.1.post2
+send2trash==1.5.0
+sentry-sdk==0.13.1
+setuptools==41.4.0
+shortuuid==0.5.0
+six==1.12.0
+smmap2==2.0.5
+subprocess32==3.5.4
+terminado==0.8.2
+testpath==0.4.4
+threadpoolctl==1.1.0
+torch-scatter==1.3.2
+torch==1.2.0+cu92
+torchdiffeq==0.0.1
+torchvision==0.4.0+cu92
+tornado==6.0.3
+traitlets==4.3.3
+urllib3==1.25.6
+wandb==0.8.13
+watchdog==0.9.0
+wcwidth==0.1.7
+webencodings==0.5.1
+wheel==0.33.6
+widgetsnbextension==3.5.1
+wincertstore==0.2
+yarl==1.3.0
+zipp==0.6.0
\ No newline at end of file
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-events.jsonl b/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-events.jsonl
new file mode 100644
index 0000000..4534740
--- /dev/null
+++ b/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-events.jsonl
@@ -0,0 +1,3 @@
+{"system.gpu.0.gpu": 10.8, "system.gpu.0.memory": 3.13, "system.gpu.0.memory_allocated": 32.63, "system.gpu.0.temp": 38.87, "system.cpu": 59.28, "system.memory": 65.99, "system.disk": 88.4, "system.proc.memory.availableMB": 5534.6, "system.proc.memory.rssMB": 2121.01, "system.proc.memory.percent": 13.03, "system.proc.cpu.threads": 20.53, "system.network.sent": 88412, "system.network.recv": 142457, "_wandb": true, "_timestamp": 1575728322, "_runtime": 31}
+{"system.gpu.0.gpu": 4.53, "system.gpu.0.memory": 1.0, "system.gpu.0.memory_allocated": 37.77, "system.gpu.0.temp": 39.33, "system.cpu": 33.68, "system.memory": 68.97, "system.disk": 88.4, "system.proc.memory.availableMB": 5049.62, "system.proc.memory.rssMB": 2634.97, "system.proc.memory.percent": 16.19, "system.proc.cpu.threads": 22.47, "system.network.sent": 122256, "system.network.recv": 178888, "_wandb": true, "_timestamp": 1575728353, "_runtime": 62}
+{"system.gpu.0.gpu": 13.53, "system.gpu.0.memory": 9.07, "system.gpu.0.memory_allocated": 37.76, "system.gpu.0.temp": 39.2, "system.cpu": 16.82, "system.memory": 68.88, "system.disk": 88.4, "system.proc.memory.availableMB": 5061.91, "system.proc.memory.rssMB": 2634.9, "system.proc.memory.percent": 16.19, "system.proc.cpu.threads": 19.0, "system.network.sent": 141693, "system.network.recv": 197901, "_wandb": true, "_timestamp": 1575728384, "_runtime": 93}
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-history.jsonl b/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-history.jsonl
new file mode 100644
index 0000000..e69de29
diff --git a/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-metadata.json b/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-metadata.json
new file mode 100644
index 0000000..10e9dd0
--- /dev/null
+++ b/src/test/wandb/run-20191207_141808-uq6tvwsq/wandb-metadata.json
@@ -0,0 +1,25 @@
+{
+    "root": "C:/Users/joon0/dev/hierarchical_qmix",
+    "program": "C:/Users/joon0/dev/hierarchical_qmix/src/test/test.py",
+    "git": {
+        "remote": "https://github.com/Junyoungpark/hierarchical_qmix.git",
+        "commit": "2d6d12cad527f1961f825a7da7a2b7d481c46f01"
+    },
+    "email": "junyoungpark@kaist.ac.kr",
+    "startedAt": "2019-12-07T14:18:11.242536",
+    "host": "DESKTOP-I7JG3A1",
+    "username": "joon0",
+    "executable": "C:\\Users\\joon0\\Anaconda3\\envs\\gpu_torch130\\python.exe",
+    "os": "Windows-10-10.0.17763-SP0",
+    "python": "3.7.4",
+    "gpu": "GeForce RTX 2060",
+    "gpu_count": 1,
+    "cpu_count": 4,
+    "args": [],
+    "state": "running",
+    "jobType": null,
+    "mode": "run",
+    "name": "qmix_refac",
+    "project": "qmix3",
+    "heartbeatAt": "2019-12-07T14:19:49.574264"
+}
diff --git a/src/test/wandb/settings b/src/test/wandb/settings
new file mode 100644
index 0000000..77c80aa
--- /dev/null
+++ b/src/test/wandb/settings
@@ -0,0 +1,4 @@
+[default]
+project = qmix3
+entity = joon0105
+
